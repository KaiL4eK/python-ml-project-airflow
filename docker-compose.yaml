# Based on https://airflow.apache.org/docs/apache-airflow/2.10.4/docker-compose.yaml
---
volumes:
  postgres-db-volume:

x-logs-common:
  &logs-common
  logging:
    options:
      max-size: "10m"
      max-file: "5"

x-airflow-common:
  &airflow-common
  # Build custom image with deps from poetry
  image: python_ml_project_airflow:latest
  build:
    context: .
    dockerfile: docker/Dockerfile
    args:
      - AIRFLOW_IMAGE_NAME=${AIRFLOW_IMAGE_NAME}
  environment:
    &airflow-common-env
    # General way to config Airflow, see .env.airflow.standalone
    # AIRFLOW__<SECTION>__<KEY>
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW_UID: ${AIRFLOW_UID:-50000}
    # Our connections/variables
    AIRFLOW_CONN_SAMPLE_CONNECTION: ${AIRFLOW_CONN_SAMPLE_CONNECTION}
    AIRFLOW_VAR_SAMPLE_VARIABLE: ${AIRFLOW_VAR_SAMPLE_VARIABLE}
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
  volumes:
    # Mount sources to update without restart
    - ./python_ml_project_airflow:/opt/airflow/python_ml_project_airflow
    # Mount DAGs to update without restart
    - ./dags:/opt/airflow/dags
    # Other stuff
    - ./airflow-home/logs:/opt/airflow/logs
    - ./airflow-home/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  airflow-check-resources:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - ./scripts/check_resources.sh
    environment:
      <<: *airflow-common-env
    user: "0:0"

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - ./scripts/airflow_docker_init.sh
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    depends_on:
      <<: *airflow-common-depends-on

  postgres:
    <<: *logs-common
    image: postgres:16
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      # Airflow will be created
      POSTGRES_MULTIPLE_DATABASES: airflow:sample_db
    # Increased just for case
    # command: postgres -c 'max_connections=1000'
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./docker/scripts/create-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-postgresql-databases.sh:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
