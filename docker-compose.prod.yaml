# Based on https://airflow.apache.org/docs/apache-airflow/2.10.4/docker-compose.yaml
---
volumes:
  postgres-db-volume:

x-logs-common:
  &logs-common
  logging:
    options:
      max-size: "10m"
      max-file: "5"

x-airflow-common:
  &airflow-common
  # Build custom image with deps from poetry
  image: python_ml_project_airflow:latest
  build:
    context: .
    dockerfile: docker/Dockerfile
    args:
      - AIRFLOW_IMAGE_NAME=${AIRFLOW_IMAGE_NAME}
  environment:
    &airflow-common-env
    # General way to config Airflow, see .env.airflow.standalone
    # AIRFLOW__<SECTION>__<KEY>
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: '50'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: amqp://airflow:airflow@rabbitmq:5672/airflow
    AIRFLOW__CELERY__WORKER_CONCURRENCY: "10"
    AIRFLOW_UID: ${AIRFLOW_UID:-50000}
    # Our connections/variables
    AIRFLOW_CONN_SAMPLE_CONNECTION: ${AIRFLOW_CONN_SAMPLE_CONNECTION}
    AIRFLOW_VAR_SAMPLE_VARIABLE: ${AIRFLOW_VAR_SAMPLE_VARIABLE}
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
  volumes:
    # Mount sources to update without restart
    # TODO: somewhy with Celery it works only when we mount into dags directory
    - ./python_ml_project_airflow:/opt/airflow/dags/python_ml_project_airflow
    # Mount DAGs to update without restart
    - ./dags:/opt/airflow/dags
    # Other stuff
    - ./airflow-home/logs:/opt/airflow/logs
    - ./airflow-home/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
    rabbitmq:
      condition: service_healthy

services:
  airflow-check-resources:
    <<:
      - *airflow-common
      - *logs-common
    entrypoint: /bin/bash
    command:
      - ./scripts/check_resources.sh
    environment:
      <<: *airflow-common-env
    user: "0:0"

  airflow-init:
    <<:
      - *airflow-common
      - *logs-common
    entrypoint: /bin/bash
    command:
      - ./scripts/airflow_docker_init.sh
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-check-resources:
        condition: service_completed_successfully

  postgres:
    <<: *logs-common
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  rabbitmq:
    <<: *logs-common
    image: rabbitmq:4.0.5-management-alpine
    restart: always
    ports:
        - "15672:15672"
        - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
        - RABBITMQ_DEFAULT_USER=airflow
        - RABBITMQ_DEFAULT_PASS=airflow
        - RABBITMQ_DEFAULT_VHOST=airflow

  airflow-worker:
    <<:
      - *airflow-common
      - *logs-common
    command: celery worker
    deploy:
      replicas: 2
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-webserver:
    <<:
      - *airflow-common
      - *logs-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<:
      - *airflow-common
      - *logs-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<:
      - *airflow-common
      - *logs-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
